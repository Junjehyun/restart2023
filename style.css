* {
  /* window의 전 영역을 차지하는 body 부분의 margin을 0으로 함으로써 떨어져 있는 부분을 없앰.  한마디로 다 붙여버림.*/
  margin: 0;
   /* 구글폰트 적용 */
   font-family: 'Poppins', sans-serif;
}

body {
    /* body의 전체 배경색깔 */
    /* background-color: red; */ 
}

a {
    /* 링크밑줄 없애기 */
    text-decoration: none;
    /* 텍스트컬러 */
    color: whitesmoke
}

.navbar {
    /* display: flex를 이용해 세로로 있던 박스들을 가로로 옮겨놓는다. */
    display: flex;
    /* justify-content: space-between; 을 이용해 박스들 사이에 빈 공간을 넣어준다. */
    justify-content: space-between;
    /* align-items: center; 는 navbar에 있는 박스들을 navbar 내에서 가운데 정렬한다. */
    align-items: center;
    /* 배경화면 색깔 */
    background: #031922;
    /* navbar에 공백은 위아래로 8px, 양 옆으로 12px을 넣어 끝에 바짝 붙는 것을 방지한다. */
    padding: 8px 12px;
}

.navbar_menu {
    /* li태그 앞에 붙는 구분점을 없앰. */
    list-style: none;
    /* 세로로 되어 있는 아이템들을 가로로 위치를 변경 */
    display: flex;
    /* margin 과 padding-left를 0으로 정해 공백이 생기는 것을 없애줌. */
    margin: 0;
    padding-left: 0;
}

.navbar_menu li {
    /* <li> 태그에 공간을 주기 위해 padding 을 추가 */
    padding: 8px 30px;
    /* 텍스트 가운데 정렬 */
    text-align: center;
  }

/* li:hover 부분은 마우스 커서가 위에 올라왔을 때의 동작 변화를 표현할 수 있도록 함. */
  .navbar_menu li:hover {
    background-color: rgb(121, 149, 180);
    /* border-radius는 마우스오버시 버튼의 모서리가 둥글게 될 수 있도록 함. */
    border-radius: 4px;
  }

  .navbar_toggleBtn {
    /* 상위박스인 navbar안에서만 움직인다. */
    position: absolute;
    /* 즉 navbar 내에서 움직이는데, 이동하는 곳이 우측에서 15px떨어진 곳 이라는 의미 */
    right: 15px;
    /* 햄버거 버튼 사이즈 */
    font-size: 20px;
    /* 숨기기 기능 (밑에 media 700이하의 창일때만 뜨게 할것이기 때문이다. */
    display: none;
  }

/* @media를 사용해 반응형으로 바꿔준다. 아래 코드의 의미는 screen의 너비가 최대 크기 700px 까지는 { } 안에 있는 css 코드를 사용한다는 의미 */
@media screen and (max-width:700px) {
    .navbar {
      /* olumn; 은 navbar 박스 내부의 박스들을 column 형태로 정렬 */
      flex-direction: column;
      /* 내부박스들을 왼쪽에서부터 시작 */
      align-items: flex-start;
      /* 마진을 0으로 두어 공백이 안생기게 한다. */
      margin: 0;
    }

    .navbar_menu {
      /* 메뉴항목 숨기기 */
      display: none;
      /* main axis가 열 모양으로 변경 됨*/
      flex-direction: column;
      /* 박스 내의 아이템들이 가운데로 정렬됨. */
      align-items: center;
      /* 너비 100%로 설정 -> 그럼 가운데로 정렬됨. 그 전에는 박스 공간이 협소해서 움직이질 않음. */
      width:100%;
    }

    .navbar_toggleBtn {
      /* Media밖에서는 숨기기 기능을 했으나, 700px이하일때는 다시  보이도록 설정한다. */
      display: block;
    }

    /* 디스플레이 flex를 통해 활성화 시켜주면 js를 읽어들여 
    햄버거를 클릭할 시 메뉴들이 활성화 된다. */
    .navbar_menu.active {
      display: flex;
    }
}

.main {
  /* flex컨테이너 생성 */
  display: flex;
  /* flex item들 수평으로 세팅 */
  justify-content: center;
  /* flex item들 수직으로 세팅 */
  align-items: center;
  /* 뷰포트 조정 내용물 중앙배치 */
  min-height: 100vh;
  /* 배경컬러 */
  background: #000;
}

.content {
   /* 요소를 일반적인 문서 흐름에 따라 배치하되, 상대적인 위치를 설정하는 CSS 속성 */
  position: relative;

}

.content h2 {
  /* 부모요소 content를 기준으로 절대 위치에 배치 */
    /* h2의 water는 2개이지만, absolute를 적용하면 겹쳐서 보이게 될것이다.
    즉 두개의 태그가 겹쳐서 1개로 보이게된다. position: absolute 속성으로 인해서 부모요소를 기준으로
    절대 위치에 배치되기 때문 */
  position: absolute;
  /* 요소를 수평 -50%, 수직 -50% 이동 */
  transform: translate(-50%, -50%);
  /* 폰트크기 */
  font-size: 8em;
}

/*  content자식요소중 첫번째 h2 */
.content h2:nth-child(1) {
  /* 글자색을 투명하게 한다. 이렇게 하면 글자는 안보인다 */
  color:transparent;
  /* 글자 주변에 2px 두께의 파란색 윤곽선 테두리를 설정. */
  -webkit-text-stroke: 2px #03a9f4;
}
/* content자식요소중 두번째 h2 */
.content h2:nth-child(2) {
  /* 글자색 설정 */
  color: #03a9f4;
   /* @Keyframes를 활용해 애니메이션 효과를 넣어본다.
    4s는 한번 재생되는데 걸리는 시간, ease-in-out은 처음과 끝부분이 느리고, 중간부분은 빠르게 움직이는 함수.
    infinite는 애니메이션이 무한반복 되도록 설정
    자세한건 @Keyframes에서 세팅 */
    animation: animate 4s ease-in-out infinite;
}

/* Keyframes는 css에서 애니메이션을 만들 때 사용하는 규칙 중 하나이다.
animate는 여기서 사용되는 애니메이션 이름이다. 0%와 100%는 애니메이션의 시작과 끝을 의미,
clip-path속성을 사용해 다각형 클리핑 경로를 정의하고 있다. 이 경로는 다각형 모양의 영역을 만들어내는데 사용된다. */
@Keyframes animate {
/* Clippath는 요소를 잘라내는 방법을 지정할수 있음. 요소의 모양을 변경하거나 자름.
    polygon함수는 clip-path속성에서 사용되며 다각형 모양의 마스크를 만들어줌.
    polygon은 괄호 안에 x,y 좌표값을 차례대로 나열하여 다각형 모양의 마스크를 만든다. 
    지금 단계에서는 너무 자세히 알 필요는 없고 차근차근하자*/
    0%,100%
    {
        clip-path: polygon(0% 45%, 15% 44%, 32% 50%, 54% 60%,
         70% 61%, 84% 59%, 100% 52%, 100% 100%, 0% 100%);
    }
    50%
    {
        clip-path: polygon(0% 60%, 16% 65%, 34% 66%, 51% 62%, 
        67% 50%, 84% 45%, 100% 46%, 100% 100%, 0% 100%);
    }
}
